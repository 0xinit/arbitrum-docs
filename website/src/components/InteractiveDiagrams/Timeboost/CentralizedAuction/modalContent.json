{
  "1": {
    "title": "Step 1: Deposit funds into the auction contract",
    "content": {
      "description": "",
      "steps": [],
      "codeBlocks": [
        {
          "language": "solidity",
          "code": "function auctioneer_submitBid()\n auctioneer endpoint(json rpc api)\n - chainId\n - bidder address\n - round number\n - bit amount\n - signature"
        }
      ],
      "codeLink": {
        "text": "View full contract code",
        "url": "https://github.com/OffchainLabs/nitro/blob/master/contracts/src/bridge/Inbox.sol"
      }
    }
  },
  "2": {
    "title": "Step 2: Submit bid",
    "content": {
      "description": "",
      "steps": [""],
      "codeBlocks": [
        {
          "language": "solidity",
          "code": "function auctioneer_submitBid()\n auctioneer endpoint(json rpc api)\n - chainId\n -bidder address\n - round number\n - bit amount\n - signature"
        }
      ]
    }
  },
  "3": {
    "title": "Step 3: Transaction Submission",
    "content": {
      "description": "Transaction submission process:",
      "steps": [
        "Users submit their transactions",
        "Transactions are validated",
        "Valid transactions enter the pool"
      ],
      "codeBlocks": [
        {
          "language": "javascript",
          "code": "const tx = {\n    from: wallet.address,\n    to: contractAddress,\n    data: encodedData,\n    value: ethers.parseEther('0.1')\n};\n\nconst receipt = await wallet.sendTransaction(tx);"
        }
      ]
    }
  },
  "4": {
    "title": "Step 4: Sequencing",
    "content": {
      "description": "Sequencing process:",
      "steps": ["Transactions are ordered", "Sequencer processes them", "Order is finalized"],
      "codeBlocks": [
        {
          "language": "javascript",
          "code": "const batch = await sequencer.createBatch([\n    tx1,\n    tx2,\n    tx3\n]);\n\nawait sequencer.processBatch(batch);"
        }
      ]
    }
  },
  "5": {
    "title": "Step 5: Batch Creation",
    "content": {
      "description": "Batch creation process:",
      "steps": [
        "Transactions are grouped",
        "Batch is validated",
        "Batch is prepared for submission"
      ],
      "codeBlocks": [
        {
          "language": "solidity",
          "code": "function createBatch(Transaction[] memory txs) public {\n    require(txs.length > 0, \"Empty batch\");\n    bytes32 batchHash = keccak256(abi.encode(txs));\n    batches[batchHash] = BatchState.Pending;\n    emit BatchCreated(batchHash, txs.length);\n}"
        }
      ]
    }
  },
  "6": {
    "title": "Step 6: Verification",
    "content": {
      "description": "Verification process:",
      "steps": [
        "Batch integrity is checked",
        "State transitions are verified",
        "Results are confirmed"
      ]
    }
  },
  "7": {
    "title": "Step 7: Finalization",
    "content": {
      "description": "Finalization process:",
      "steps": ["Batch is submitted to L1", "State is updated", "Process is completed"]
    }
  }
}
